/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RedisManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available REST API operations of the Microsoft.Cache
     * provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available REST API operations of the Microsoft.Cache
     * provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available REST API operations of the Microsoft.Cache
     * provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available REST API operations of the Microsoft.Cache
     * provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * Redis
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RedisManagementClient.
 */
export interface Redis {


    /**
     * Checks that the redis cache name is valid and is not already in use.
     *
     * @param {object} parameters Parameters supplied to the CheckNameAvailability
     * Redis operation. The only supported resource type is 'Microsoft.Cache/redis'
     *
     * @param {string} parameters.name Resource name.
     *
     * @param {string} parameters.type Resource type. The only legal value of this
     * property for checking redis cache name availability is
     * 'Microsoft.Cache/redis'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(parameters: models.CheckNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Checks that the redis cache name is valid and is not already in use.
     *
     * @param {object} parameters Parameters supplied to the CheckNameAvailability
     * Redis operation. The only supported resource type is 'Microsoft.Cache/redis'
     *
     * @param {string} parameters.name Resource name.
     *
     * @param {string} parameters.type Resource type. The only legal value of this
     * property for checking redis cache name availability is
     * 'Microsoft.Cache/redis'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(parameters: models.CheckNameAvailabilityParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    checkNameAvailability(parameters: models.CheckNameAvailabilityParameters, callback: ServiceCallback<void>): void;
    checkNameAvailability(parameters: models.CheckNameAvailabilityParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets any upgrade notifications for a Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {number} history how many minutes in past to look for upgrade
     * notifications
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationListResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUpgradeNotificationsWithHttpOperationResponse(resourceGroupName: string, name: string, history: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationListResponse>>;

    /**
     * Gets any upgrade notifications for a Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {number} history how many minutes in past to look for upgrade
     * notifications
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationListResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationListResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationListResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationListResponse>;
    listUpgradeNotifications(resourceGroupName: string, name: string, history: number, callback: ServiceCallback<models.NotificationListResponse>): void;
    listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationListResponse>): void;


    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing
     * Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Create Redis
     * operation.
     *
     * @param {object} [parameters.redisConfiguration] All Redis Settings. Few
     * possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @param {boolean} [parameters.enableNonSslPort] Specifies whether the non-ssl
     * Redis server port (6379) is enabled.
     *
     * @param {object} [parameters.tenantSettings] A dictionary of tenant settings
     *
     * @param {number} [parameters.shardCount] The number of shards to be created
     * on a Premium Cluster Cache.
     *
     * @param {string} [parameters.minimumTlsVersion] Optional: requires clients to
     * use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1',
     * '1.2'). Possible values include: '1.0', '1.1', '1.2'
     *
     * @param {object} parameters.sku The SKU of the Redis cache to deploy.
     *
     * @param {string} parameters.sku.name The type of Redis cache to deploy. Valid
     * values: (Basic, Standard, Premium). Possible values include: 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.family The SKU family to use. Valid values:
     * (C, P). (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
     *
     * @param {number} parameters.sku.capacity The size of the Redis cache to
     * deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6),
     * for P (Premium) family (1, 2, 3, 4).
     *
     * @param {string} [parameters.subnetId] The full resource ID of a subnet in a
     * virtual network to deploy the Redis cache in. Example format:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
     *
     * @param {string} [parameters.staticIP] Static IP address. Required when
     * deploying a Redis cache inside an existing Azure Virtual Network.
     *
     * @param {array} [parameters.zones] A list of availability zones denoting
     * where the resource needs to come from.
     *
     * @param {string} parameters.location The geo-location where the resource
     * lives
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, name: string, parameters: models.RedisCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisResource>>;

    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing
     * Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Create Redis
     * operation.
     *
     * @param {object} [parameters.redisConfiguration] All Redis Settings. Few
     * possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @param {boolean} [parameters.enableNonSslPort] Specifies whether the non-ssl
     * Redis server port (6379) is enabled.
     *
     * @param {object} [parameters.tenantSettings] A dictionary of tenant settings
     *
     * @param {number} [parameters.shardCount] The number of shards to be created
     * on a Premium Cluster Cache.
     *
     * @param {string} [parameters.minimumTlsVersion] Optional: requires clients to
     * use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1',
     * '1.2'). Possible values include: '1.0', '1.1', '1.2'
     *
     * @param {object} parameters.sku The SKU of the Redis cache to deploy.
     *
     * @param {string} parameters.sku.name The type of Redis cache to deploy. Valid
     * values: (Basic, Standard, Premium). Possible values include: 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.family The SKU family to use. Valid values:
     * (C, P). (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
     *
     * @param {number} parameters.sku.capacity The size of the Redis cache to
     * deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6),
     * for P (Premium) family (1, 2, 3, 4).
     *
     * @param {string} [parameters.subnetId] The full resource ID of a subnet in a
     * virtual network to deploy the Redis cache in. Example format:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
     *
     * @param {string} [parameters.staticIP] Static IP address. Required when
     * deploying a Redis cache inside an existing Azure Virtual Network.
     *
     * @param {array} [parameters.zones] A list of availability zones denoting
     * where the resource needs to come from.
     *
     * @param {string} parameters.location The geo-location where the resource
     * lives
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, name: string, parameters: models.RedisCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisResource>;
    create(resourceGroupName: string, name: string, parameters: models.RedisCreateParameters, callback: ServiceCallback<models.RedisResource>): void;
    create(resourceGroupName: string, name: string, parameters: models.RedisCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisResource>): void;


    /**
     * Update an existing Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Update Redis
     * operation.
     *
     * @param {object} [parameters.redisConfiguration] All Redis Settings. Few
     * possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @param {boolean} [parameters.enableNonSslPort] Specifies whether the non-ssl
     * Redis server port (6379) is enabled.
     *
     * @param {object} [parameters.tenantSettings] A dictionary of tenant settings
     *
     * @param {number} [parameters.shardCount] The number of shards to be created
     * on a Premium Cluster Cache.
     *
     * @param {string} [parameters.minimumTlsVersion] Optional: requires clients to
     * use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1',
     * '1.2'). Possible values include: '1.0', '1.1', '1.2'
     *
     * @param {object} [parameters.sku] The SKU of the Redis cache to deploy.
     *
     * @param {string} parameters.sku.name The type of Redis cache to deploy. Valid
     * values: (Basic, Standard, Premium). Possible values include: 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.family The SKU family to use. Valid values:
     * (C, P). (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
     *
     * @param {number} parameters.sku.capacity The size of the Redis cache to
     * deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6),
     * for P (Premium) family (1, 2, 3, 4).
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, name: string, parameters: models.RedisUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisResource>>;

    /**
     * Update an existing Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Update Redis
     * operation.
     *
     * @param {object} [parameters.redisConfiguration] All Redis Settings. Few
     * possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @param {boolean} [parameters.enableNonSslPort] Specifies whether the non-ssl
     * Redis server port (6379) is enabled.
     *
     * @param {object} [parameters.tenantSettings] A dictionary of tenant settings
     *
     * @param {number} [parameters.shardCount] The number of shards to be created
     * on a Premium Cluster Cache.
     *
     * @param {string} [parameters.minimumTlsVersion] Optional: requires clients to
     * use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1',
     * '1.2'). Possible values include: '1.0', '1.1', '1.2'
     *
     * @param {object} [parameters.sku] The SKU of the Redis cache to deploy.
     *
     * @param {string} parameters.sku.name The type of Redis cache to deploy. Valid
     * values: (Basic, Standard, Premium). Possible values include: 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.family The SKU family to use. Valid values:
     * (C, P). (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
     *
     * @param {number} parameters.sku.capacity The size of the Redis cache to
     * deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6),
     * for P (Premium) family (1, 2, 3, 4).
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, name: string, parameters: models.RedisUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisResource>;
    update(resourceGroupName: string, name: string, parameters: models.RedisUpdateParameters, callback: ServiceCallback<models.RedisResource>): void;
    update(resourceGroupName: string, name: string, parameters: models.RedisUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisResource>): void;


    /**
     * Deletes a Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a Redis cache (resource description).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisResource>>;

    /**
     * Gets a Redis cache (resource description).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisResource>;
    get(resourceGroupName: string, name: string, callback: ServiceCallback<models.RedisResource>): void;
    get(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisResource>): void;


    /**
     * Lists all Redis caches in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisListResult>>;

    /**
     * Lists all Redis caches in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.RedisListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisListResult>): void;


    /**
     * Gets all Redis caches in the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisListResult>>;

    /**
     * Gets all Redis caches in the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisListResult>;
    list(callback: ServiceCallback<models.RedisListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisListResult>): void;


    /**
     * Retrieve a Redis cache's access keys. This operation requires write
     * permission to the cache resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisAccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeysWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisAccessKeys>>;

    /**
     * Retrieve a Redis cache's access keys. This operation requires write
     * permission to the cache resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisAccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisAccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisAccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeys(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisAccessKeys>;
    listKeys(resourceGroupName: string, name: string, callback: ServiceCallback<models.RedisAccessKeys>): void;
    listKeys(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisAccessKeys>): void;


    /**
     * Regenerate Redis cache's access keys. This operation requires write
     * permission to the cache resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {string} keyType The Redis access key to regenerate. Possible values
     * include: 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisAccessKeys>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateKeyWithHttpOperationResponse(resourceGroupName: string, name: string, keyType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisAccessKeys>>;

    /**
     * Regenerate Redis cache's access keys. This operation requires write
     * permission to the cache resource.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {string} keyType The Redis access key to regenerate. Possible values
     * include: 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisAccessKeys} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisAccessKeys} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisAccessKeys} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateKey(resourceGroupName: string, name: string, keyType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisAccessKeys>;
    regenerateKey(resourceGroupName: string, name: string, keyType: string, callback: ServiceCallback<models.RedisAccessKeys>): void;
    regenerateKey(resourceGroupName: string, name: string, keyType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisAccessKeys>): void;


    /**
     * Reboot specified Redis node(s). This operation requires write permission to
     * the cache resource. There can be potential data loss.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Specifies which Redis node(s) to reboot.
     *
     * @param {string} parameters.rebootType Which Redis node(s) to reboot.
     * Depending on this value data loss is possible. Possible values include:
     * 'PrimaryNode', 'SecondaryNode', 'AllNodes'
     *
     * @param {number} [parameters.shardId] If clustering is enabled, the ID of the
     * shard to be rebooted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisForceRebootResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    forceRebootWithHttpOperationResponse(resourceGroupName: string, name: string, parameters: models.RedisRebootParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisForceRebootResponse>>;

    /**
     * Reboot specified Redis node(s). This operation requires write permission to
     * the cache resource. There can be potential data loss.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Specifies which Redis node(s) to reboot.
     *
     * @param {string} parameters.rebootType Which Redis node(s) to reboot.
     * Depending on this value data loss is possible. Possible values include:
     * 'PrimaryNode', 'SecondaryNode', 'AllNodes'
     *
     * @param {number} [parameters.shardId] If clustering is enabled, the ID of the
     * shard to be rebooted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisForceRebootResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisForceRebootResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisForceRebootResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    forceReboot(resourceGroupName: string, name: string, parameters: models.RedisRebootParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisForceRebootResponse>;
    forceReboot(resourceGroupName: string, name: string, parameters: models.RedisRebootParameters, callback: ServiceCallback<models.RedisForceRebootResponse>): void;
    forceReboot(resourceGroupName: string, name: string, parameters: models.RedisRebootParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisForceRebootResponse>): void;


    /**
     * Import data into Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters for Redis import operation.
     *
     * @param {string} [parameters.format] File format.
     *
     * @param {array} parameters.files files to import.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    importDataWithHttpOperationResponse(resourceGroupName: string, name: string, parameters: models.ImportRDBParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Import data into Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters for Redis import operation.
     *
     * @param {string} [parameters.format] File format.
     *
     * @param {array} parameters.files files to import.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    importData(resourceGroupName: string, name: string, parameters: models.ImportRDBParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    importData(resourceGroupName: string, name: string, parameters: models.ImportRDBParameters, callback: ServiceCallback<void>): void;
    importData(resourceGroupName: string, name: string, parameters: models.ImportRDBParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Export data from the redis cache to blobs in a container.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters for Redis export operation.
     *
     * @param {string} [parameters.format] File format.
     *
     * @param {string} parameters.prefix Prefix to use for exported files.
     *
     * @param {string} parameters.container Container name to export to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportDataWithHttpOperationResponse(resourceGroupName: string, name: string, parameters: models.ExportRDBParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Export data from the redis cache to blobs in a container.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters for Redis export operation.
     *
     * @param {string} [parameters.format] File format.
     *
     * @param {string} parameters.prefix Prefix to use for exported files.
     *
     * @param {string} parameters.container Container name to export to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportData(resourceGroupName: string, name: string, parameters: models.ExportRDBParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    exportData(resourceGroupName: string, name: string, parameters: models.ExportRDBParameters, callback: ServiceCallback<void>): void;
    exportData(resourceGroupName: string, name: string, parameters: models.ExportRDBParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing
     * Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Create Redis
     * operation.
     *
     * @param {object} [parameters.redisConfiguration] All Redis Settings. Few
     * possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @param {boolean} [parameters.enableNonSslPort] Specifies whether the non-ssl
     * Redis server port (6379) is enabled.
     *
     * @param {object} [parameters.tenantSettings] A dictionary of tenant settings
     *
     * @param {number} [parameters.shardCount] The number of shards to be created
     * on a Premium Cluster Cache.
     *
     * @param {string} [parameters.minimumTlsVersion] Optional: requires clients to
     * use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1',
     * '1.2'). Possible values include: '1.0', '1.1', '1.2'
     *
     * @param {object} parameters.sku The SKU of the Redis cache to deploy.
     *
     * @param {string} parameters.sku.name The type of Redis cache to deploy. Valid
     * values: (Basic, Standard, Premium). Possible values include: 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.family The SKU family to use. Valid values:
     * (C, P). (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
     *
     * @param {number} parameters.sku.capacity The size of the Redis cache to
     * deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6),
     * for P (Premium) family (1, 2, 3, 4).
     *
     * @param {string} [parameters.subnetId] The full resource ID of a subnet in a
     * virtual network to deploy the Redis cache in. Example format:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
     *
     * @param {string} [parameters.staticIP] Static IP address. Required when
     * deploying a Redis cache inside an existing Azure Virtual Network.
     *
     * @param {array} [parameters.zones] A list of availability zones denoting
     * where the resource needs to come from.
     *
     * @param {string} parameters.location The geo-location where the resource
     * lives
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, name: string, parameters: models.RedisCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisResource>>;

    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing
     * Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Create Redis
     * operation.
     *
     * @param {object} [parameters.redisConfiguration] All Redis Settings. Few
     * possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @param {boolean} [parameters.enableNonSslPort] Specifies whether the non-ssl
     * Redis server port (6379) is enabled.
     *
     * @param {object} [parameters.tenantSettings] A dictionary of tenant settings
     *
     * @param {number} [parameters.shardCount] The number of shards to be created
     * on a Premium Cluster Cache.
     *
     * @param {string} [parameters.minimumTlsVersion] Optional: requires clients to
     * use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1',
     * '1.2'). Possible values include: '1.0', '1.1', '1.2'
     *
     * @param {object} parameters.sku The SKU of the Redis cache to deploy.
     *
     * @param {string} parameters.sku.name The type of Redis cache to deploy. Valid
     * values: (Basic, Standard, Premium). Possible values include: 'Basic',
     * 'Standard', 'Premium'
     *
     * @param {string} parameters.sku.family The SKU family to use. Valid values:
     * (C, P). (C = Basic/Standard, P = Premium). Possible values include: 'C', 'P'
     *
     * @param {number} parameters.sku.capacity The size of the Redis cache to
     * deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6),
     * for P (Premium) family (1, 2, 3, 4).
     *
     * @param {string} [parameters.subnetId] The full resource ID of a subnet in a
     * virtual network to deploy the Redis cache in. Example format:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
     *
     * @param {string} [parameters.staticIP] Static IP address. Required when
     * deploying a Redis cache inside an existing Azure Virtual Network.
     *
     * @param {array} [parameters.zones] A list of availability zones denoting
     * where the resource needs to come from.
     *
     * @param {string} parameters.location The geo-location where the resource
     * lives
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, name: string, parameters: models.RedisCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisResource>;
    beginCreate(resourceGroupName: string, name: string, parameters: models.RedisCreateParameters, callback: ServiceCallback<models.RedisResource>): void;
    beginCreate(resourceGroupName: string, name: string, parameters: models.RedisCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisResource>): void;


    /**
     * Deletes a Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Import data into Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters for Redis import operation.
     *
     * @param {string} [parameters.format] File format.
     *
     * @param {array} parameters.files files to import.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginImportDataWithHttpOperationResponse(resourceGroupName: string, name: string, parameters: models.ImportRDBParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Import data into Redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters for Redis import operation.
     *
     * @param {string} [parameters.format] File format.
     *
     * @param {array} parameters.files files to import.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginImportData(resourceGroupName: string, name: string, parameters: models.ImportRDBParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginImportData(resourceGroupName: string, name: string, parameters: models.ImportRDBParameters, callback: ServiceCallback<void>): void;
    beginImportData(resourceGroupName: string, name: string, parameters: models.ImportRDBParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Export data from the redis cache to blobs in a container.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters for Redis export operation.
     *
     * @param {string} [parameters.format] File format.
     *
     * @param {string} parameters.prefix Prefix to use for exported files.
     *
     * @param {string} parameters.container Container name to export to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginExportDataWithHttpOperationResponse(resourceGroupName: string, name: string, parameters: models.ExportRDBParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Export data from the redis cache to blobs in a container.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {object} parameters Parameters for Redis export operation.
     *
     * @param {string} [parameters.format] File format.
     *
     * @param {string} parameters.prefix Prefix to use for exported files.
     *
     * @param {string} parameters.container Container name to export to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginExportData(resourceGroupName: string, name: string, parameters: models.ExportRDBParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginExportData(resourceGroupName: string, name: string, parameters: models.ExportRDBParameters, callback: ServiceCallback<void>): void;
    beginExportData(resourceGroupName: string, name: string, parameters: models.ExportRDBParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all Redis caches in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisListResult>>;

    /**
     * Lists all Redis caches in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.RedisListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisListResult>): void;


    /**
     * Gets all Redis caches in the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisListResult>>;

    /**
     * Gets all Redis caches in the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RedisListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisListResult>): void;
}

/**
 * @class
 * FirewallRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RedisManagementClient.
 */
export interface FirewallRules {


    /**
     * Gets all firewall rules in the specified redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisFirewallRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRedisResourceWithHttpOperationResponse(resourceGroupName: string, cacheName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisFirewallRuleListResult>>;

    /**
     * Gets all firewall rules in the specified redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisFirewallRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisFirewallRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisFirewallRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRedisResource(resourceGroupName: string, cacheName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisFirewallRuleListResult>;
    listByRedisResource(resourceGroupName: string, cacheName: string, callback: ServiceCallback<models.RedisFirewallRuleListResult>): void;
    listByRedisResource(resourceGroupName: string, cacheName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisFirewallRuleListResult>): void;


    /**
     * Create or update a redis cache firewall rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {string} ruleName The name of the firewall rule.
     *
     * @param {object} parameters Parameters supplied to the create or update redis
     * firewall rule operation.
     *
     * @param {string} parameters.startIP lowest IP address included in the range
     *
     * @param {string} parameters.endIP highest IP address included in the range
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisFirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, cacheName: string, ruleName: string, parameters: models.RedisFirewallRuleCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisFirewallRule>>;

    /**
     * Create or update a redis cache firewall rule
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {string} ruleName The name of the firewall rule.
     *
     * @param {object} parameters Parameters supplied to the create or update redis
     * firewall rule operation.
     *
     * @param {string} parameters.startIP lowest IP address included in the range
     *
     * @param {string} parameters.endIP highest IP address included in the range
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisFirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisFirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisFirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: models.RedisFirewallRuleCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisFirewallRule>;
    createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: models.RedisFirewallRuleCreateParameters, callback: ServiceCallback<models.RedisFirewallRule>): void;
    createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: models.RedisFirewallRuleCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisFirewallRule>): void;


    /**
     * Gets a single firewall rule in a specified redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {string} ruleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisFirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, cacheName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisFirewallRule>>;

    /**
     * Gets a single firewall rule in a specified redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {string} ruleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisFirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisFirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisFirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, cacheName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisFirewallRule>;
    get(resourceGroupName: string, cacheName: string, ruleName: string, callback: ServiceCallback<models.RedisFirewallRule>): void;
    get(resourceGroupName: string, cacheName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisFirewallRule>): void;


    /**
     * Deletes a single firewall rule in a specified redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {string} ruleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, cacheName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a single firewall rule in a specified redis cache.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {string} ruleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, cacheName: string, ruleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, cacheName: string, ruleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, cacheName: string, ruleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all firewall rules in the specified redis cache.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisFirewallRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRedisResourceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisFirewallRuleListResult>>;

    /**
     * Gets all firewall rules in the specified redis cache.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisFirewallRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisFirewallRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisFirewallRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRedisResourceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisFirewallRuleListResult>;
    listByRedisResourceNext(nextPageLink: string, callback: ServiceCallback<models.RedisFirewallRuleListResult>): void;
    listByRedisResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisFirewallRuleListResult>): void;
}

/**
 * @class
 * PatchSchedules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RedisManagementClient.
 */
export interface PatchSchedules {


    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisPatchScheduleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRedisResourceWithHttpOperationResponse(resourceGroupName: string, cacheName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisPatchScheduleListResult>>;

    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} cacheName The name of the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisPatchScheduleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisPatchScheduleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisPatchScheduleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRedisResource(resourceGroupName: string, cacheName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisPatchScheduleListResult>;
    listByRedisResource(resourceGroupName: string, cacheName: string, callback: ServiceCallback<models.RedisPatchScheduleListResult>): void;
    listByRedisResource(resourceGroupName: string, cacheName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisPatchScheduleListResult>): void;


    /**
     * Create or replace the patching schedule for Redis cache (requires Premium
     * SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {array} scheduleEntries List of patch schedules for a Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisPatchSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, scheduleEntries: models.ScheduleEntry[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisPatchSchedule>>;

    /**
     * Create or replace the patching schedule for Redis cache (requires Premium
     * SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {array} scheduleEntries List of patch schedules for a Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisPatchSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisPatchSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisPatchSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, name: string, scheduleEntries: models.ScheduleEntry[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisPatchSchedule>;
    createOrUpdate(resourceGroupName: string, name: string, scheduleEntries: models.ScheduleEntry[], callback: ServiceCallback<models.RedisPatchSchedule>): void;
    createOrUpdate(resourceGroupName: string, name: string, scheduleEntries: models.ScheduleEntry[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisPatchSchedule>): void;


    /**
     * Deletes the patching schedule of a redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the patching schedule of a redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the patching schedule of a redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisPatchSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisPatchSchedule>>;

    /**
     * Gets the patching schedule of a redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisPatchSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisPatchSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisPatchSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisPatchSchedule>;
    get(resourceGroupName: string, name: string, callback: ServiceCallback<models.RedisPatchSchedule>): void;
    get(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisPatchSchedule>): void;


    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisPatchScheduleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByRedisResourceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisPatchScheduleListResult>>;

    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisPatchScheduleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisPatchScheduleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisPatchScheduleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByRedisResourceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisPatchScheduleListResult>;
    listByRedisResourceNext(nextPageLink: string, callback: ServiceCallback<models.RedisPatchScheduleListResult>): void;
    listByRedisResourceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisPatchScheduleListResult>): void;
}

/**
 * @class
 * LinkedServer
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the RedisManagementClient.
 */
export interface LinkedServer {


    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {string} linkedServerName The name of the linked server that is being
     * added to the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Create Linked server
     * operation.
     *
     * @param {string} parameters.linkedRedisCacheId Fully qualified resourceId of
     * the linked redis cache.
     *
     * @param {string} parameters.linkedRedisCacheLocation Location of the linked
     * redis cache.
     *
     * @param {string} parameters.serverRole Role of the linked server. Possible
     * values include: 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisLinkedServerWithProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, name: string, linkedServerName: string, parameters: models.RedisLinkedServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisLinkedServerWithProperties>>;

    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {string} linkedServerName The name of the linked server that is being
     * added to the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Create Linked server
     * operation.
     *
     * @param {string} parameters.linkedRedisCacheId Fully qualified resourceId of
     * the linked redis cache.
     *
     * @param {string} parameters.linkedRedisCacheLocation Location of the linked
     * redis cache.
     *
     * @param {string} parameters.serverRole Role of the linked server. Possible
     * values include: 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisLinkedServerWithProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisLinkedServerWithProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisLinkedServerWithProperties} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, name: string, linkedServerName: string, parameters: models.RedisLinkedServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisLinkedServerWithProperties>;
    create(resourceGroupName: string, name: string, linkedServerName: string, parameters: models.RedisLinkedServerCreateParameters, callback: ServiceCallback<models.RedisLinkedServerWithProperties>): void;
    create(resourceGroupName: string, name: string, linkedServerName: string, parameters: models.RedisLinkedServerCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisLinkedServerWithProperties>): void;


    /**
     * Deletes the linked server from a redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {string} linkedServerName The name of the linked server that is being
     * added to the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, linkedServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the linked server from a redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {string} linkedServerName The name of the linked server that is being
     * added to the Redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, linkedServerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the detailed information about a linked server of a redis cache
     * (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {string} linkedServerName The name of the linked server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisLinkedServerWithProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, linkedServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisLinkedServerWithProperties>>;

    /**
     * Gets the detailed information about a linked server of a redis cache
     * (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {string} linkedServerName The name of the linked server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisLinkedServerWithProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisLinkedServerWithProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisLinkedServerWithProperties} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, linkedServerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisLinkedServerWithProperties>;
    get(resourceGroupName: string, name: string, linkedServerName: string, callback: ServiceCallback<models.RedisLinkedServerWithProperties>): void;
    get(resourceGroupName: string, name: string, linkedServerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisLinkedServerWithProperties>): void;


    /**
     * Gets the list of linked servers associated with this redis cache (requires
     * Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisLinkedServerWithPropertiesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisLinkedServerWithPropertiesList>>;

    /**
     * Gets the list of linked servers associated with this redis cache (requires
     * Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the redis cache.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisLinkedServerWithPropertiesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisLinkedServerWithPropertiesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisLinkedServerWithPropertiesList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisLinkedServerWithPropertiesList>;
    list(resourceGroupName: string, name: string, callback: ServiceCallback<models.RedisLinkedServerWithPropertiesList>): void;
    list(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisLinkedServerWithPropertiesList>): void;


    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {string} linkedServerName The name of the linked server that is being
     * added to the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Create Linked server
     * operation.
     *
     * @param {string} parameters.linkedRedisCacheId Fully qualified resourceId of
     * the linked redis cache.
     *
     * @param {string} parameters.linkedRedisCacheLocation Location of the linked
     * redis cache.
     *
     * @param {string} parameters.serverRole Role of the linked server. Possible
     * values include: 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisLinkedServerWithProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, name: string, linkedServerName: string, parameters: models.RedisLinkedServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisLinkedServerWithProperties>>;

    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the Redis cache.
     *
     * @param {string} linkedServerName The name of the linked server that is being
     * added to the Redis cache.
     *
     * @param {object} parameters Parameters supplied to the Create Linked server
     * operation.
     *
     * @param {string} parameters.linkedRedisCacheId Fully qualified resourceId of
     * the linked redis cache.
     *
     * @param {string} parameters.linkedRedisCacheLocation Location of the linked
     * redis cache.
     *
     * @param {string} parameters.serverRole Role of the linked server. Possible
     * values include: 'Primary', 'Secondary'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisLinkedServerWithProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisLinkedServerWithProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisLinkedServerWithProperties} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, name: string, linkedServerName: string, parameters: models.RedisLinkedServerCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisLinkedServerWithProperties>;
    beginCreate(resourceGroupName: string, name: string, linkedServerName: string, parameters: models.RedisLinkedServerCreateParameters, callback: ServiceCallback<models.RedisLinkedServerWithProperties>): void;
    beginCreate(resourceGroupName: string, name: string, linkedServerName: string, parameters: models.RedisLinkedServerCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisLinkedServerWithProperties>): void;


    /**
     * Gets the list of linked servers associated with this redis cache (requires
     * Premium SKU).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RedisLinkedServerWithPropertiesList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RedisLinkedServerWithPropertiesList>>;

    /**
     * Gets the list of linked servers associated with this redis cache (requires
     * Premium SKU).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RedisLinkedServerWithPropertiesList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RedisLinkedServerWithPropertiesList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RedisLinkedServerWithPropertiesList} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RedisLinkedServerWithPropertiesList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RedisLinkedServerWithPropertiesList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RedisLinkedServerWithPropertiesList>): void;
}
